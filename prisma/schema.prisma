// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto())  @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
 name String
 username  String?
 image String?
  profileImage          String?
  coverImage String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String? 
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  followerIds   String[]  @db.ObjectId
  followingIds  String[]  @db.ObjectId
   accounts       Account[]

   posts Post[]
  comments Comment[]
  notifications Notification[]
  sessions Session[]
}



model Post {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   body String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   userId String @db.ObjectId
   likedIds String[] @db.ObjectId

   user User @relation(fields: [userId],references: [id],onDelete:Cascade)

   comments Comment[]
}

model Comment {
body String
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   userId String @db.ObjectId
   postId String @db.ObjectId

user User @relation(fields: [userId],references: [id],onDelete:Cascade)
post Post @relation(fields: [postId],references: [id],onDelete:Cascade)

}


model Notification {
    id String @id @default(cuid()) @map("_id") @db.ObjectId
body String
  userId String @db.ObjectId
  createdAt DateTime @default(now())

  
 user User @relation(fields: [userId],references: [id],onDelete:Cascade)
}